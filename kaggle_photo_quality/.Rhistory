fallback <- read.table("/Users/jason.xie/Desktop/ml-dev-experiments/5ms/5ms_stats.txt", sep="\t", header=FALSE)
fallback <- read.table("/Users/jason.xie/Desktop/ml-dev-experiments/5ms_stuff/5ms_stats.txt", sep="\t", header=FALSE)
fallback
fallback <- setNames(fallback, c("hour","isFallBack","count"))
fallback
pbinom(q=5, size=10, prob=1/6)
?pbinom
n=10
p=.5
x=9
pbinom(x, n, p)
punif(5, min=1, max=10) - punif(4, min=1, max=10)
punif(5, min=1, max=10)
punif(4, min=1, max=10)
source('~/Desktop/ml-dev-experiments/placement_studies/host_strategy_visualization.R')
data
dbinom(0, size=4, prob=0.5)
dbinom(1, size=4, prob=0.5)
dbinom(2, size=4, prob=0.5)
dbinom(3, size=4, prob=0.5)
dbinom(4, size=4, prob=0.5)
0.0625 + 0.25
0.3125 + 0.375
0.6875 + 0.25
pbinom
pbinom(1, size=4, prob=0.5)
pbinom(2, size=4, prob=0.5)
pbinom(0, size=4, prob=0.5)
pbinom(2, size=3, prob=0.5)
pbinom(3, size=5, prob=0.5)
pexp(5/60, rate=10)
pexp(0, rate=10)
pexp(1, rate=10)
pexp(0.5, rate=10)
qexp(0.5, rate=10)
pexp(15.5/60, rate=4)
pexp(40.2/60, rate=4) - pexp(10.7/60, rate=4)
qexp(0.95, rate=4)
0.7489331 * 60
pnorm(5,2,3)
qnorm(5, 2, 3)
1 - pnorm(9, 7, 3)
qnorm(0.04, 7, 3)
pnorm(10, 7, 3) - pnorm(7, 7,3)
pnorm(170, 181, 7.3)  - pnorm(160, 181, 7.3)
1 - pnorm(190, 181, 7.3)
qnorm(0.2, 181, 7.3)
qnorm(0.8, 181, 7.3)
pnorm(125, 129.71, 2.28)
qnorm(0.1, 129.71, 2.28)
qnorm(0.05, 129.71, 2.28)
qnorm(0.95, 129.71, 2.28)
1 - 0.08 - 0.13 - 0.16 - 0.19 - 0.22
8 + 13 + 16
val = c(-4, 0, 2, 6, 9, 11)
p = c(0.08, .13, .16, .22, .19, .22)
val * p
sum(val * p)
e = 5.45
sum((x - e) * p)
sum((val - e) * p)
sum(((val - e)^2) * p)
pbinom
pbinom(240, size=500, prob=0.4)
dbinom(240, size=500, prob=0.4)
5.099668e-05 * 100
pbinom(260, size=500, prob=0.4) - pbinom(220, size=500, prob=0.4)
500 * 0.4
500 * 0.4 * 0.6
qexp(0.1, 4)
pexp(0.1, 4)
pexp(5, 0.2) - pexp(4, 0.2)
1- pexp(10, 0.2)
dpois(2,2)
dpois(1,2)
dpois(1.5,2)
dpois(0,2)
dpois(1,2)
dpois(2,2)
dpois(3,2)
dpois(4,2)
dpois(13,13)
ppois(13,13)
1 - ppois(16,13)
1 - ppois(15,13)
qpois(0.1, 11)
qpois(0.05, 11)
qpois(0.95, 11)
pnorm(5,7,3)
pnorm(7,7,3)
qnorm(7,7,3)
qnorm(0.2,7,3)
pnorm(7,6.8,1.7)
pnorm(7,6.8,1.7)
0.2 / 1.7
pnorm(3,6.8,1.7)
1 - pnorm(3,6.8,1.7)
qnorm(0.9,6.8,1.7)
qnorm(0.01, 10, 2)
qnorm(0.99, 10, 2)
0.3993 + 0.2637
l = c(4.4, 5.3, 4.4, 2.8, 0.9, 6.1, 3.0, 8.6, 10.7, 4.3, 1.9, 12.0, 5.9, 4.8, 7.7)
var(l)
lm = mean(l)
lm
sum(l - lm) * sum(l - lm)
sum((l - lm) * (l - lm))
sum((l - lm) * (l - lm)) / (len(l) - 1)
sum((l - lm) * (l - lm)) / (length(l) - 1)
1 - 0.23 - 0.14 - 0.36
pnorm(0.2, 9.3, 3.5)
qnorm(0.2, 9.3, 3.5)
pnorm(5, 9.3, 3.5)
pnorm(5, 9.3, 3.5) - pnorm(10, 9.3, 3.5)
ppois(1, lambda=0.66)
l = 26
1 / l / l
var = 1 / l / l
m = 1/ l
m
l = 1/26
m = 1/ l
m
var = 1 / l / l
var
mu = 26
sig = sqrt(1 / (l ^ 2 * 80))
sig
26 - qnorm(0.15, mu, sig)
n = 36
sqrt(15 / 36)
sig_bar = sqrt(15 / 36)
help(rnorm)
rnorm(36, 5, sqrt(15))
median(rnorm(36, 5, sqrt(15)))
median(rnorm(36, 5, sqrt(15)))
median(rnorm(36, 5, sqrt(15)))
median(rnorm(36, 5, sqrt(15)))
median(rnorm(36, 5, sqrt(15)))
rep(1)
rep(1, 5)
rep(median(rnorm(36, 5, sqrt(15))), 5)
rep(median(rnorm(36, 5, sqrt(15))), 1000)
rep(median(rnorm(36, 5, sqrt(15))), 1000)
median(rnorm(36, 5, sqrt(15)))
x <- replicate(1000, median(rnorm(36, 5, sqrt(15))))
x
mean(x)
std(x)
sd(x)
x
var(x)
sd(x)
x <- replicate(1000, median(rnorm(36, 5, 15)))
mean(x)
sd(x)
x <- replicate(10000, median(rnorm(36, 5, 15)))
sd(x)
sqrt(15 * 15 / 36)
x <- replicate(10000, median(rnorm(36, 2.3, 15)))
sd(x)
rpois()
help(rpois)
ppois(60, 5.35)
dpois(1, 5.35)
dpois(2, 5.35)
dpois(5, 5.35)
5.35 * 60
qnorm(0.8, 5, 3)
qnorm(0.8, 5.35, sqrt(5.35 / 60))
5.601315 * 60
ppois(5, 5.35)
ppois(50, 5.35)
ppois(300, 5.35 * 60)
qnorm(5, 5.35, sqrt(5.35 / 60))
pnorm(5, 5.35, sqrt(5.35 / 60))
pnorm(5, 5.35, sqrt(5.35 / 60))
help(qnorm)
qnorm(0.2, 5, 2)
pnorm(0.2, 5, 2)
pnorm(4, 5, 2)
pnorm(170.035 + 1, 170.035, 1.122) - pnorm(170.035 -1 1, 170.035, 1.122)
pnorm(170.035 + 1, 170.035, 1.122) - pnorm(170.035 -1, 170.035, 1.122)
u = 170.035
s = 1.122
qnorm(0.025, u, s)
qnorm(0.025, u, s) - u
(qnorm(0.025, u, s) - u) / s
pnorm(168, u, s)
1 - pnorm(11, 10.53, sqrt(4 / 36))
u = 145
s = sqrt(14 * 14 / 49)
s
pnorm(142, u, s) - pnorm(146, u, s)
qnorm(0.8, u, s)
nm = 75 / 2
nv = (75 - 0) * 75 / 12
nv
m = nm
m
ns =sqrt() nv / 100)
ns =sqrt(nv / 100)
ns
qnorm(0.8, m, ns)
m
nv
ns * ns
qnorm(0.9, m, ns)
5.3
sqrt(5.3 * 5.3 / 60)
pnorm(2, 5, 3)
pnorm(1, 5, 3)
pnorm(5, 5, 3)
pnorm(5, 5.3, 0.6842271)
help(ppois)
ppois(5, 5.3)
lam = 0.5
e = 1/0.5
e
var = 1 / lam / lam
var
sqrt(var / 80)
pnorm(0.95, 2, sqrt(var / 80)) - 2
pnorm(0.95, 2, sqrt(var / 80))
qnorm(0.95, 2, sqrt(var / 80))
qnorm(0.95, 2, sqrt(var / 80)) - 2
(qnorm(0.95, 2, sqrt(var / 80)) - 2) / sqrt(var / 80)
var
var = sqrt(var / 80)
s = sqrt(var / 80)
s
var = 4
s = sqrt(var / 80)
s
2 - qnorm(0.05, 2, s)
pnorm(2.5, 2, s)
1 - pnorm(2.5, 2, s)
x <- c(12, 14, 11, 14, 13, 15, 12, 16, 10)
mean (x)
sd(x)
sqrt(13)
1 - 0.17 - 0.11 - 0.23 - 0.15
0.34 + 0.23
p = c(0.17, 0.11, 0.23, 0.34, 0.15)
sum(p)
x = c(-5, 0, 1, 3, 8)
x * p
sum(x * p)
ex = 1.6
x
(x - ex)
(x - ex) * p
(x - ex) * (x - ex) * p
sum((x - ex) * (x - ex) * p)
x <- 1:5
x
x <- 0:5
dbinom(x, 5, 0.15)
cumsum(dbinom(x, 5, 0.15))
pexp(7, 1/8)
pnorm(0.2, 5, 3)
pnorm(5, 5, 3)
qnorm(5, 5, 3)
qnorm(0.2, 5, 3)
pnorm(5, 5, 3)
pnorm(2.2, 2, sqrt(4 / 40))
pexp(1, 0.5)
pnorm(6500, 7300, 700)
1 - pnorm(2.2, 2, sqrt(4 / 40))
install.packages("clValid")
library(clValid)
data(mouse)
summary(mouse)
express <- mouse[1:25,c("M1","M2","M3","NC1","NC2","NC3")]
rownames(express) <- mouse$ID
express <- mouse[,c("M1","M2","M3","NC1","NC2","NC3")]
rownames(express) <- mouse$ID
express
names(express)
sotaCl <- sota(as.matrix(express), 4)
names(sotaCl)
sotaCl
sotaCl <- sota(as.matrix(express), 10)
names(sotaCl)
sotaCl
plot(sotaCl)
plot(sotaCl, cl=2)
packages.install("acf")
package.install("acf")
install.packages("acf")
require(graphics)
acf(lh)
lh
install.packages('FourierDescriptors')
library('FourierDescriptors')
fd1 <- create.fourier.descriptor()
print(fd1)
plot(fd1)
library('FourierDescriptors')
library('FourierDescriptors')
fd1 <- create.fourier.descriptor()
print(fd1)
plot(fd1)
library('FourierDescriptors')
options(download.file.method = "wget")
install.packages('FourierDescriptors')
install.packages("FourierDescriptors", dependencies=TRUE, repos='http://cran.rstudio.com/')
install_github("johnmyleswhite/FourierDescriptors")
library("install_github")
library(devtools)
install_github("johnmyleswhite/FourierDescriptors")
install.packages('FourierDescriptors')
R CMD
library('FourierDescriptors')
fd1 <- create.fourier.descriptor()
print(fd1)
plot(fd1)
plot(create.fourier.descriptor(amplitude = c(0, 0, 0, 0)))
library(wikipediatrend)
install.packages("wikipediatrend")
library(wikipediatrend)
wp_trend("Golden_State_Warriors")
t <- wp_trend("Golden_State_Warriors")
t
t <- wp_trend("Golden_State_Warriors", from='2010-01-01', lang='en')
t
library(wikipediatrend)
library(ggplot2)
ggplot(warriors, aes(x=date, y=count, color=count)) + geom_line() + ggtitle("Wiki page count for Golden State Warriors")
warriors <- t
ggplot(warriors, aes(x=date, y=count, color=count)) + geom_line() + ggtitle("Wiki page count for Golden State Warriors")
require(graphics)
require(acf)
install.packages("acf")
acf(lh)
acf(lh)
acf(warriors$count)
ggplot(warriors, aes(x=date, y=count, color=count)) + geom_line() + ggtitle("Wiki page count for Golden State Warriors")
acf(warriors$count)
stl(warriors$count)
library(stl)
stl
nottem
summary(nottem)
summary(warriors$count)
stl(nottem)
stl(warriors$count, s.window="periodic")
stl(nottem, s.window="periodic")
stl(warriors$count, s.window="periodic")
plot(nottem.stl)
plot(stl(nottem, s.window="periodic"))
plot(warriors$count)
acf(warriors$count, type="correlation")
acf(warriors$count, type="covariance")
pacf(warriors$count)
acf(lh)
pacf(lh)
acf(lh)
pacf(warriors$count)
ggplot(warriors, aes(x=date, y=count, color=count)) + geom_line() + ggtitle("Wiki page count for Golden State Warriors")
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
rain
acf(rain)
pacf(rain)
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat")
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kings
kingstimeseries <- ts(kings)
kingstimeseries
kingtimeseriesdiff1 <- diff(kingstimeseries, differences=1)
plot(kingstimeseries)
plot(kingtimeseriesdiff1)
kingstimeseries
kingtimeseriesdiff1
acf(kingtimeseriesdiff1, lag.max=20)
acf(kingtimeseriesdiff1, lag.max=20)
pacf(kingtimeseriesdiff1, lag.max=20)
acf(kingstimeseries, lag.max=20)
pacf(kingstimeseries, lag.max=20)
acf(kingstimeseries, lag.max=20)
pacf(kingstimeseries, lag.max=20)
plot(kingstimeseries)
acf(kingstimeseries, lag.max=20)
pacf(kingstimeseries, lag.max=20)
help(acf)
acf(kingstimeseries, lag.max=20, title="asd")
train <- read.csv("data/train.csv")
setwd("/Users/jason.xie/Downloads/Quick-Data-Science-Experiments-2016/kaggle_photo_quality")
train <- read.csv("data/train.csv")
ls()
ls()
setwd("/Users/jason.xie/Downloads/Quick-Data-Science-Experiments-2016/kaggle_photo_quality")
lsdir()
list.files(".")
list.files("data/")
train <- read.csv("data/training.csv")
test <- read.csv("data/test.csv")
summary(train)
summary(test)
library(dplyr)
good <- filter(train, good == 1)
bad <- filter(train, good == 0)
summary(good)
summary(bad)
train[["width", "height", "size"]]
train[[c("width", "height", "size")]]
train[c("width", "height", "size")]
summary(good)
summary(bad)
cor(good)
cor(train$size, train$good)
cor(train$width, train$good)
cor(train$height, train$good) # 6% for width
cor(train$latitude, train$good)
cor(train$longitude, train$good)
summary(good$latitude)
summary(bad$latitude)
good$latitude
bad$latitude
length(good)
nrow(good)
nrow(bad)
summary(bad$latitude)
summary(good$latitude)
train$description
train$name
strsplit(train$name, " ")
strsplit(train$name, ' ')
strsplit(train$name, '[ ]')
train$name[0]
train$name[1]
strsplit(train$name[1], '[ ]')
length(train$name)
train$name
type(train$name)
typeof(train$name)
typeof(train$name[1])
typeof(train$name[2])
train$name[2]
train$name[2][1]
train$name[2][2]
train$name[2]
typeof(train$name[2])
train$name[2].class
class(train$name[2])
train <- read.csv("data/training.csv", stringsAsFactors=FALSE)
test <- read.csv("data/test.csv", stringsAsFactors=FALSE)
summary(train)
summary(test)
good <- filter(train, good == 1)
bad <- filter(train, good == 0)
nrow(good)
nrow(bad) # there are 3x the bad than the good
summary(good)
summary(bad)
cor(train$size, train$good) # 10% pearson correlation for size
cor(train$width, train$good) # 6% for width
cor(train$height, train$good) # 0.3% for height, so width is more important than height???
cor(train$latitude, train$good) # -10% for lat, how vertical something is
cor(train$longitude, train$good) # 20% for long, how horizontal something is o.0 wtf
# longitude and latitude map http://www.mapsofworld.com/images2008/world-map-with-latitude-and-longitude.jpg
summary(good$latitude)
summary(bad$latitude) # the mean latitude of good is 32, while bad is 27
class(train$name[2])
strsplit(train$name, "[ ]")
length(strsplit(train$name, "[ ]"))
strsplit(train$name, "[ ]")
length(strsplit(train$name, "[ ]")[1])
length(strsplit(train$name, "[ ]")[2])
length(strsplit(train$name, "[ ]")[3])
strsplit(train$name, "[ ]")[3]
strsplit(train$name, "[ ]")[5]
length(strsplit(train$name, "[ ]")[5])
strsplit(train$name, "[ ]")[5]
strsplit(train$name, "[ ]")[5][[1]]
strsplit(train$name, "[ ]")[5][1]
strsplit(train$name, "[ ]")[5][[1]]
length(strsplit(train$name, "[ ]")[5][[1]])
train %>% rowwise() %>% length(strsplit(train$name), "[ ]")
train %>% rowwise() %>% length(strsplit(train$name, "[ ]"))
strsplit(train$name, "[ ]")
strsplit(train$name, "[ ]") %>% rowwise() %>% length()
names(strsplit(train$name, "[ ]"))
length(strsplit(train$name, "[ ]"))
length(unlist(strsplit(train$name, "[ ]")))
unlist(strsplit(train$name, "[ ]"))
strsplit(train$name, "[ ]")
length(strsplit(train$name, "[ ]")[9997])
strsplit(train$name, "[ ]")[9997]
unlist(strsplit(train$name, "[ ]")[9997])
length(unlist(strsplit(train$name, "[ ]")[9997]))
train %>% rowwise() %>% length(unlist(strsplit(name, "[ ]")))
train %>% rowwise()
train %>% rowwise() %>% name
sapply(train$name, getLength)
getLength <- function(line){
return(length(unlist(strsplit(line, "[ ]"))))
}
sapply(train$name, FUN=getLength)
t <- sapply(train$name, FUN=getLength)
names(t)
t <- sapply(train$name, FUN=getLength)
t[1]
class(t[1])
train$name_length <- sapply(train$name, FUN=getLength)
train$name_length
train[c("name_length", "name")]
cor(train$name_length, train$good)
train$description_lenght <- sapply(train$description, FUN=getLength)
train$description_length <- sapply(train$description, FUN=getLength)
cor(train$description_length, train$good)
summary(train)
